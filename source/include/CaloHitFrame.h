/*
 *
 * CaloHitFrame.h header template automatically generated by a class generator
 * Creation date : lun. mai 5 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CALOHITFRAME_H
#define CALOHITFRAME_H

#include "RQ_OBJECT.h"
#include "Rtypes.h"

#include "OrderedCaloHitList.h"

class TGCompositeFrame;
class TGGroupFrame;
class TGButtonGroup;
class TGCheckButton;
class TGHorizontalFrame;
class TGVerticalFrame;
class TGHButtonGroup;
class TGRadioButton;
class TGNumberEntry;
class TGLabel;
class TGComboBox;
class TGNumberEntryField;

namespace sdhcal
{

class SDHCAL;
class OrderedCaloHitList;
class CaloHit;


/** 
 * @brief CaloHitFrame class
 */ 
class CaloHitFrame 
{
	RQ_OBJECT("CaloHitFrame");

	enum CaloHitColor
	{
		THRESHOLD_COLOR,
		DENSITY_2D_COLOR,
		DENSITY_3D_COLOR,
		ENERGY_PROFILE_COLOR
	};

	enum CaloHitCut
	{
		THRESHOLD_1_ONLY_CUT,
		THRESHOLD_2_ONLY_CUT,
		THRESHOLD_3_ONLY_CUT,
		THRESHOLD_1_AND_2_CUT,
		THRESHOLD_1_AND_3_CUT,
		THRESHOLD_2_AND_3_CUT,
		DENSITY_2D_GREATER,
		DENSITY_2D_LESSER,
		DENSITY_3D_GREATER,
		DENSITY_3D_LESSER
	};

 public:
 /**
  * @brief Ctor
  */
 CaloHitFrame(TGCompositeFrame *pMainFrame);

 /**
  * @brief Dtor 
  */
 virtual ~CaloHitFrame();

 /**
  *
  */
 void showCaloHits(Bool_t on);

 /**
  *
  */
 void showPartiallyCaloHits(Bool_t on);

 /**
  *
  */
 void enableShowPartiallyCaloHitFrame(Bool_t);

 /**
  *
  */
 void enableCutValueFrame(Bool_t on);

 /**
  *
  */
 void updateCaloHits();

 /**
  *
  */
 void getCurrentOrderedCaloHitList();

 /**
  *
  */
 bool shouldHideCaloHit(CaloHit *pCaloHit);

 /**
  *
  */
 void changeCaloHitsColors(Int_t entry);

 /**
  *
  */
 void setCaloHitColor(CaloHit *pCaloHit, CaloHitColor caloHitColor);

 /**
  *
  */
 static int getColorBetweenMinAndMax(float min, float max, float value);



protected:

 SDHCAL                  *m_pSDHCAL;
 OrderedCaloHitList       m_currentOrderedCaloHitList;

 TGGroupFrame            *m_pCaloHitFrame;

	TGHorizontalFrame       *m_pCaloHitColorFrame;
 TGLabel                 *m_pCaloHitColorLabel;
 TGComboBox              *m_pCaloHitColorComboBox;

 TGCheckButton           *m_pShowCaloHitsButton;

 TGCheckButton           *m_pShowPartialButton;
	TGVerticalFrame         *m_pShowPartialCaloHitsFrame;
	TGHButtonGroup          *m_pShowHideButtonGroup;
	TGRadioButton           *m_pShowButton;
	TGRadioButton           *m_pHideButton;
	TGHorizontalFrame       *m_pFromLayerFrame;
	TGHorizontalFrame       *m_pToLayerFrame;
	TGLabel                 *m_pFromLayerLabel;
	TGNumberEntry           *m_pFromLayerEntry;
	TGLabel                 *m_pToLayerLabel;
	TGNumberEntry           *m_pToLayerEntry;

	TGGroupFrame            *m_pCaloHitCutFrame;
	TGCheckButton           *m_pCaloHitCutButton;
	TGLabel                 *m_pCutOnLabel;
	TGComboBox              *m_pCaloHitCutComboBox;
	TGLabel                 *m_pCutValueLabel;
	TGNumberEntryField      *m_pCutValueEntryField;


 ClassDef(CaloHitFrame, 0);
}; 

} 

#endif  //  CALOHITFRAME_H
