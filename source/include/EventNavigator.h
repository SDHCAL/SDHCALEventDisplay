/*
 *
 * EventNavigator.h header template automatically generated by a class generator
 * Creation date : sam. avr. 26 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef EVENTNAVIGATOR_H
#define EVENTNAVIGATOR_H

// root
class TGMainFrame;
class 	TGGroupFrame;
class TGHorizontalFrame;
class TGVerticalFrame;
class TGPictureButton;
class TGLabel;
class TGNumberEntry;
class TGTextButton;

#include "Rtypes.h"
#include "RQ_OBJECT.h"

// lcio
namespace IO
{
 class LCReader;
}

namespace EVENT
{
 class LCEvent;
}

namespace sdhcal
{

class EventNavigatorGUI;

/** 
 * @brief EventNavigator class
 */ 
class EventNavigator 
{

	RQ_OBJECT("sdhcal::EventNavigator");

 public:

	/**
  * @brief Ctor
  */
 EventNavigator(TGMainFrame *pMainFrame);

 /**
  * @brief Dtor 
  */
 virtual ~EventNavigator();

 /**
  *
  */
 void goToNextEvent();

 /**
  *
  */
 void goToPreviousEvent();

 /**
  *
  */
 void goToEvent(Long_t eventNumber);

 /**
  *
  */
 void goToRun(Long_t runNumber);

 /**
  *
  */
 void loadLCIOFile(const std::string &fileName);

 /**
  *
  */
 void loadFileDialog();

 /**
  *
  */
 void eventUpdated();   //*SIGNAL*

protected:

 /**
  *
  */
 EVENT::LCEvent *getCurrentEvent();

 EventNavigatorGUI   *m_pEventNavigatorGUI;
 IO::LCReader        *m_pLCReader;
 EVENT::LCEvent      *m_pCurrentEvent;
 std::string          m_currentFileName;
 Long_t               m_currentRunNumber;
 Long_t               m_currentEventNumber;

 friend class EventManager;

 ClassDef(EventNavigator,0);
}; 

//-------------------------------------------------------------------------------------------

/**
 * @brief EventNavigatorGUI class
 */
class EventNavigatorGUI
{
private:

	/**
	 *
	 */
	EventNavigatorGUI(EventNavigator *pEventNavigator, TGMainFrame *pMainFrame);

	/**
	 *
	 */
	~EventNavigatorGUI();

	EventNavigator          *m_pEventNavigator;

	TGGroupFrame            *m_pNavigatorFrame;
	TGHorizontalFrame       *m_pNextAndPreviousButtonsFrame;
	TGVerticalFrame         *m_pButtonsFrame;
	TGPictureButton         *m_pPreviousEventButton;
	TGPictureButton         *m_pNextEventButton;
	TGTextButton            *m_pLoadFileButton;
	TGVerticalFrame         *m_pEventNumberFrame;
	TGLabel                 *m_pGoToEventLabel;
	TGLabel                 *m_pGoToRunLabel;
	TGNumberEntry           *m_pEventNumberEntry;
	TGNumberEntry           *m_pRunNumberEntry;

	// friendship
	friend class EventNavigator;
};

//-------------------------------------------------------------------------------------------

inline EVENT::LCEvent *EventNavigator::getCurrentEvent()
{
	return m_pCurrentEvent;
}



} 

#endif  //  EVENTNAVIGATOR_H
