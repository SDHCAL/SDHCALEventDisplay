/*
 *
 * SDHCAL.h header template automatically generated by a class generator
 * Creation date : sam. mai 3 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SDHCAL_H
#define SDHCAL_H

#include <map>

class TGeoMaterial;
class TGeoMedium;
class TGeoVolume;
class TGeoManager;

namespace sdhcal
{

class SDHCAL;

class Layer
{

protected:

	/**
	 *
	 */
	Layer(unsigned int layerNumber, TGeoManager *pGeoManager);

	/**
	 *
	 */
	~Layer();

	/**
	 *
	 */
	void setColor(unsigned int color);

	/**
	 *
	 */
	void setTransparency(unsigned int transparency);

	/**
	 *
	 */
	void hide();

	/**
	 *
	 */
	void show();

	// members
	unsigned int           m_color;
	unsigned int           m_transparency;
	unsigned int           m_layerNumber;

	TGeoMaterial            *m_pMaterial;
	TGeoMedium              *m_pMedium;
	TGeoVolume              *m_pBottomBorder;
	TGeoVolume              *m_pTopBorder;
	TGeoVolume              *m_pRightBorder;
	TGeoVolume              *m_pLeftBorder;

	friend class SDHCAL;
};

/** 
 * @brief SDHCAL class
 */ 
class SDHCAL 
{
 public:
 /**
  * @brief Ctor
  */
 SDHCAL(TGeoManager *pGeoManager);

 /**
  * @brief Dtor 
  */
 virtual ~SDHCAL();

 /**
  *
  */
 void build();

 /**
  *
  */
 void showLayers(unsigned int fromLayer, unsigned int toLayer);

 /**
  *
  */
 void hideLayers(unsigned int fromLayer, unsigned int toLayer);

 /**
  *
  */
 void hide();

 /**
  *
  */
 void show();

 /**
  *
  */
 void setLayerColor(unsigned int layer, unsigned int color);

 /**
  *
  */
 void setLayersColor(unsigned int color);

 /**
  *
  */
 void setLayerTransparency(unsigned int layer, unsigned int transparency);

 /**
  *
  */
 void setLayersTransparency(unsigned int transparency);

	/**
	 *
	 */
	unsigned int getNumberOfLayers() const;

protected:

 bool                                m_alreadyBuilt;
 TGeoManager                        *m_pGeoManager;
// TGeoMaterial                       *m_SDHCALMaterial;
// TGeoMedium                         *m_SDHCALMedium;
// TGeoVolume                         *m_SDHCALVolume;
 std::map<unsigned int, Layer*>     m_layerMap;
 unsigned int                       m_globalColor;
 unsigned int                       m_globalTransparency;
	unsigned int                       m_numberOfLayers;
};

inline unsigned int SDHCAL::getNumberOfLayers() const
{
	return m_numberOfLayers;
}

} 

#endif  //  SDHCAL_H
