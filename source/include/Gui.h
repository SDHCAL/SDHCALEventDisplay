  /// \file Gui.h
/*
 *
 * Gui.h header template automatically generated by a class generator
 * Creation date : lun. avr. 28 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef GUI_H
#define GUI_H

// root
class TGMainFrame;
class TGeoManager;

namespace sdhcal
{

class EventNavigator;
class EventManager;
class LcioCollectionFrame;
class SDHCAL;
class GeometryManager;
class DetectorFrame;
class CaloHitFrame;

/** 
 * @brief Gui class
 */ 
class Gui 
{
public:

 /**
  * @brief Return the unique instance of this class
  */
 static Gui *getInstance();

 /**
  * @brief Kill the unique instance of this class
  */
 static void kill();

 /**
  *
  */
 void build();

 /**
  *
  */
 EventNavigator *getEventNavigator() const;

 /**
  *
  */
 EventManager *getEventManager() const;

 /**
  *
  */
 LcioCollectionFrame *getLcioCollectionFrame() const;

 /**
  *
  */
 GeometryManager *getGeometryManager() const;


protected:

 /**
  * @brief Ctor
  */
 Gui();

 /**
  * @brief Dtor
  */
 virtual ~Gui();


 // members
 static Gui       *m_pInstance;

 bool                  m_alreadyBuilt;
 GeometryManager       *m_pGeometryManager;
 EventNavigator        *m_pEventNavigator;
 DetectorFrame         *m_pDetectorFrame;
 CaloHitFrame          *m_pCaloHitFrame;
 EventManager          *m_pEventManager;
 LcioCollectionFrame   *m_pLcioCollectionFrame;
 TGMainFrame           *m_pMainFrame;
}; 

//-------------------------------------------------------------------------------------------

inline EventNavigator *Gui::getEventNavigator() const
{
	return m_pEventNavigator;
}

//-------------------------------------------------------------------------------------------

inline EventManager *Gui::getEventManager() const
{
	return m_pEventManager;
}

//-------------------------------------------------------------------------------------------

inline LcioCollectionFrame *Gui::getLcioCollectionFrame() const
{
	return m_pLcioCollectionFrame;
}

//-------------------------------------------------------------------------------------------

inline GeometryManager *Gui::getGeometryManager() const
{
	return m_pGeometryManager;
}

} 

#endif  //  GUI_H
