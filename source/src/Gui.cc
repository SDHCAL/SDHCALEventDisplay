  /// \file Gui.cc
/*
 *
 * Gui.cc source template automatically generated by a class generator
 * Creation date : lun. avr. 28 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "Gui.h"

// root
#include "TEveManager.h"
#include "TEveBrowser.h"
#include "TGNumberEntry.h"
#include "TGButton.h"
#include "TGWindow.h"
#include "TGLabel.h"
#include "TGLViewer.h"
#include "TEveViewer.h"
#include "TGLLightSet.h"
#include "TGFrame.h"
#include "TGTab.h"
#include "TEveGedEditor.h"
#include "TGFileBrowser.h"
#include "TGeoManager.h"
#include "TEveGeoNode.h"
#include "TGShutter.h"
#include "TGScrollBar.h"

// sdhcal
#include "EventNavigator.h"
#include "EventManager.h"
#include "LcioCollectionFrame.h"
#include "GeometryManager.h"
#include "DetectorFrame.h"
#include "CaloHitFrame.h"

#include <iostream>

extern TEveManager *gEve;

namespace sdhcal
{

Gui *Gui::m_pInstance = NULL;

Gui::Gui()
 : m_pGeometryManager(NULL),
   m_pEventNavigator(NULL),
   m_pEventManager(NULL),
   m_pLcioCollectionFrame(NULL),
   m_pMainFrame(NULL),
   m_alreadyBuilt(false)
{

}

//-------------------------------------------------------------------------------------------

Gui::~Gui() 
{

}

//-------------------------------------------------------------------------------------------

void Gui::build()
{
	if(m_alreadyBuilt)
		return;

	m_pGeometryManager = new GeometryManager();
	m_pGeometryManager->buildGeometry();

	TGeoManager *pGeoManager = m_pGeometryManager->getGeoManager();

	// TEve root event display
	TEveManager *pEveManager = TEveManager::Create();

 TGeoNode * pTopNode = pGeoManager->GetTopNode();
 TEveGeoTopNode *pEveTopNode = new TEveGeoTopNode(pGeoManager, pTopNode);
 pEveTopNode->SetVisLevel(4);
 pEveTopNode->GetNode()->GetVolume()->SetVisibility(kFALSE);

 pEveManager->AddGlobalElement(pEveTopNode);
 pEveManager->Redraw3D(kTRUE);

	pEveManager->GetDefaultGLViewer()->SetIgnoreSizesOnUpdate(kTRUE);

	TEveBrowser *pEveBrowser = pEveManager->GetBrowser();
	pEveBrowser->StartEmbedding(TRootBrowser::kLeft);

	m_pMainFrame = new TGMainFrame(gClient->GetRoot(), 1200, 600, kFitWidth | kFitHeight);
	m_pMainFrame->SetWindowName("GUI");
	m_pMainFrame->SetCleanup(kDeepCleanup);

	TGCanvas *pCanvas = new TGCanvas(m_pMainFrame);
	m_pMainFrame->AddFrame(pCanvas, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
	TGCompositeFrame *pCompositeFrame = new TGCompositeFrame(pCanvas->GetViewPort());
	pCanvas->SetContainer(pCompositeFrame);

	m_pEventNavigator = new EventNavigator(pCompositeFrame);
	m_pEventManager = new EventManager(m_pEventNavigator);
	m_pLcioCollectionFrame = new LcioCollectionFrame(pCompositeFrame);
	m_pDetectorFrame = new DetectorFrame(pCompositeFrame);
	m_pCaloHitFrame = new CaloHitFrame(pCompositeFrame);

	m_pMainFrame->MapSubwindows();
	m_pMainFrame->Resize(pCompositeFrame->GetDefaultSize());
	m_pMainFrame->MapWindow();

	pEveBrowser->StopEmbedding();
	pEveBrowser->SetTabTitle("Options", 0);

	TGLViewer *pGLViewer = gEve->GetDefaultGLViewer();
	pGLViewer->GetLightSet()->SetUseSpecular(false);

	TGWindow *pMainWindow = gEve->GetMainWindow();
	pMainWindow->SetWindowName("SDHCAL Event Display");

	m_alreadyBuilt = true;
}

//-------------------------------------------------------------------------------------------

Gui *Gui::getInstance()
{
 if(NULL == m_pInstance)
 	m_pInstance = new Gui();

 return m_pInstance;
}

//-------------------------------------------------------------------------------------------

void Gui::kill()
{
  if(NULL != m_pInstance)
  {
    delete m_pInstance;
    m_pInstance = NULL;
  }
}


} 

