/*
 *
 * EventNavigator.cc source template automatically generated by a class generator
 * Creation date : sam. avr. 26 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "EventNavigator.h"

// root
#include "TGFrame.h"
#include "TGButton.h"
#include "TGLabel.h"
#include "TGNumberEntry.h"
#include "TSystem.h"
#include "TGSplitter.h"
#include "TGFileDialog.h"

// lcio
#include "EVENT/LCEvent.h"
#include "IO/LCReader.h"
#include "IOIMPL/LCFactory.h"

// streamlog
#include "streamlog/streamlog.h"

ClassImpQ(sdhcal::EventNavigator)

namespace sdhcal
{

EventNavigator::EventNavigator(TGMainFrame *pMainFrame)
{
 m_pLCReader = IOIMPL::LCFactory::getInstance()->createLCReader(1);
 m_pCurrentEvent = NULL;
 m_currentFileName = "";
 m_currentRunNumber = 0;
 m_currentEventNumber = 0;

	m_pEventNavigatorGUI = new EventNavigatorGUI(this, pMainFrame);
}

//-------------------------------------------------------------------------------------------

EventNavigator::~EventNavigator() 
{
	// gui
	delete m_pEventNavigatorGUI;

	// reader
	m_pLCReader->close();
	delete m_pLCReader;
}

//-------------------------------------------------------------------------------------------

void EventNavigator::goToNextEvent()
{
	if(m_currentFileName.empty())
	{
		streamlog_out(WARNING) << "No lcio file loaded for the moment. Can't load next event !" << std::endl;
		return;
	}

	if(NULL == m_pCurrentEvent)
	{
		streamlog_out(WARNING) << "No event loaded. Couldn't load next event !" << std::endl;
		return;
	}

	m_pEventNavigatorGUI->m_pEventNumberEntry->SetNumber(m_currentEventNumber+1);
	m_pEventNavigatorGUI->m_pEventNumberEntry->Emit("ValueSet(Long_t)", m_currentEventNumber+1);
}

//-------------------------------------------------------------------------------------------

void EventNavigator::goToPreviousEvent()
{
	if(m_currentFileName.empty())
	{
		streamlog_out(WARNING) << "No lcio file loaded for the moment. Can't load previous event !" << std::endl;
		return;
	}

	if(NULL == m_pCurrentEvent)
	{
		streamlog_out(WARNING) << "No event loaded. Couldn't load previous event !" << std::endl;
		return;
	}

	m_pEventNavigatorGUI->m_pEventNumberEntry->SetNumber(m_currentEventNumber-1);
	m_pEventNavigatorGUI->m_pEventNumberEntry->Emit("ValueSet(Long_t)", m_currentEventNumber-1);
}

//-------------------------------------------------------------------------------------------

void EventNavigator::loadLCIOFile(const std::string &fileName)
{
	if(!m_currentFileName.empty())
	{
		try
		{
			streamlog_out(MESSAGE) << "Closing lcio file : " << m_currentFileName << std::endl;
			m_pLCReader->close();
			delete m_pLCReader;
			m_pLCReader = IOIMPL::LCFactory::getInstance()->createLCReader(1);
			m_currentFileName = "";
		}
		catch(EVENT::Exception &e)
		{
			streamlog_out(WARNING) << "Couldn't close lcio file '" << m_currentFileName << "'. Message : " << e.what() << std::endl;
			return;
		}
	}

	try
	{
	 m_pLCReader->open(fileName);
	 m_currentFileName = fileName;
	 streamlog_out(MESSAGE) << "LCIO file loaded successfully ! (" << m_currentFileName << ")" << std::endl;
	}
	catch(EVENT::Exception &e)
	{
		streamlog_out(WARNING) << "Couldn't open lcio file '" << fileName << "'. Message : " << e.what() << std::endl;

		if(!m_currentFileName.empty())
		{
			streamlog_out(WARNING) << "Current lcio file is : " << m_currentFileName << std::endl;
		}
		else
		{
			streamlog_out(WARNING) << "No lcio file opened for the moment" << std::endl;
		}

		return;
	}

}

//-------------------------------------------------------------------------------------------

void EventNavigator::goToEvent(Long_t eventNumber)
{
	eventNumber = m_pEventNavigatorGUI->m_pEventNumberEntry->GetNumber();

	if(m_currentFileName.empty())
	{
		streamlog_out(WARNING) << "No lcio file loaded for the moment. Can't load event !" << std::endl;
		return;
	}

	try
	{
		EVENT::LCEvent *pLCEvent = NULL;
		pLCEvent = m_pLCReader->readEvent(m_currentRunNumber, eventNumber);

		if(NULL == pLCEvent)
			throw EVENT::Exception("Can't read event from current lcio file");

		m_pCurrentEvent = pLCEvent;
		m_currentEventNumber = eventNumber;

		this->eventUpdated();
		streamlog_out(MESSAGE) << "Event nb " << m_currentEventNumber << " successfully loaded !" << std::endl;
	}
	catch(EVENT::Exception &e)
	{
		streamlog_out(WARNING) << "Couldn't load event. Message : " << e.what() << std::endl;
		return;
	}
}

//-------------------------------------------------------------------------------------------

void EventNavigator::goToRun(Long_t runNumber)
{
	m_currentRunNumber = m_pEventNavigatorGUI->m_pRunNumberEntry->GetNumber();
}

//-------------------------------------------------------------------------------------------

void EventNavigator::loadFileDialog()
{
 const char *pLcioFileType[] =
 {"LCIO files", "*.slcio",
  "All files" , "*",
  0           , 0 };

	TGFileInfo fileInfo;
	fileInfo.fFileTypes = pLcioFileType;
	fileInfo.fIniDir = StrDup(".");

 new TGFileDialog(gClient->GetRoot(), m_pEventNavigatorGUI->m_pNavigatorFrame, kFDOpen, &fileInfo);
 const char *lcioStr = fileInfo.fFilename;

 if(NULL != lcioStr)
 {
 	std::string lcioFileName = fileInfo.fFilename;
 	this->loadLCIOFile(lcioFileName);
 }
}

//-------------------------------------------------------------------------------------------

void EventNavigator::eventUpdated()
{
	Emit("eventUpdated()");
}

//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------

EventNavigatorGUI::EventNavigatorGUI(EventNavigator *pEventNavigator, TGMainFrame *pMainFrame)
{
	m_pEventNavigator = pEventNavigator;

	// The main frame of the navigator
	m_pNavigatorFrame = new TGGroupFrame(pMainFrame, "Event Navigation", kHorizontalFrame);

 // the frame for all buttons
	m_pButtonsFrame = new TGVerticalFrame(pMainFrame);
	m_pNavigatorFrame->AddFrame(m_pButtonsFrame, new TGLayoutHints(kLHintsBottom));

	// the frame for next and previous buttons
	m_pNextAndPreviousButtonsFrame = new TGHorizontalFrame(m_pButtonsFrame);
	m_pButtonsFrame->AddFrame(m_pNextAndPreviousButtonsFrame, new TGLayoutHints(kLHintsCenterX));

	TString icondir( Form("%s/icons/", gSystem->Getenv("ROOTSYS")));

	// Previous button
	m_pPreviousEventButton = new TGPictureButton(m_pNextAndPreviousButtonsFrame, gClient->GetPicture(icondir + "GoBack.gif"));
	m_pNextAndPreviousButtonsFrame->AddFrame(m_pPreviousEventButton, new TGLayoutHints(kLHintsNormal, 0, 6, 0, 0));
	m_pPreviousEventButton->Connect("Clicked()", "sdhcal::EventNavigator", m_pEventNavigator, "goToPreviousEvent()");

	// Next button
	m_pNextEventButton = new TGPictureButton(m_pNextAndPreviousButtonsFrame, gClient->GetPicture(icondir + "GoForward.gif"));
	m_pNextAndPreviousButtonsFrame->AddFrame(m_pNextEventButton);
	m_pNextEventButton->Connect("Clicked()", "sdhcal::EventNavigator", m_pEventNavigator, "goToNextEvent()");

	// Load lcio file button
	m_pLoadFileButton = new TGTextButton(m_pButtonsFrame, "&Open LCIO file");
	m_pButtonsFrame->AddFrame(m_pLoadFileButton, new TGLayoutHints(kLHintsCenterY ,0 ,0, 8, 0));
	m_pLoadFileButton->Connect("Clicked()", "sdhcal::EventNavigator", m_pEventNavigator, "loadFileDialog()");

	// frame for event and run numbers
	m_pEventNumberFrame = new TGVerticalFrame(m_pNavigatorFrame);

	const int padShift = 15;
	// run number gui
	m_pGoToRunLabel = new TGLabel(m_pEventNumberFrame, "Go to run");
	m_pRunNumberEntry = new TGNumberEntry(m_pEventNumberFrame, 0, 5, -1, TGNumberFormat::kNESInteger, TGNumberFormat::kNEANonNegative);
	m_pEventNumberFrame->AddFrame(m_pGoToRunLabel, new TGLayoutHints(kLHintsCenterX ,padShift));
	m_pEventNumberFrame->AddFrame(m_pRunNumberEntry, new TGLayoutHints(kLHintsCenterX ,padShift));
	m_pRunNumberEntry->Connect("ValueSet(Long_t)", "sdhcal::EventNavigator", m_pEventNavigator, "goToRun(Long_t)");

	// event number gui
	m_pGoToEventLabel = new TGLabel(m_pEventNumberFrame, "Go to event");
	m_pEventNumberEntry = new TGNumberEntry(m_pEventNumberFrame, 0, 5, -1, TGNumberFormat::kNESInteger, TGNumberFormat::kNEAPositive);
	m_pEventNumberFrame->AddFrame(m_pGoToEventLabel, new TGLayoutHints(kLHintsCenterX ,padShift));
	m_pEventNumberFrame->AddFrame(m_pEventNumberEntry, new TGLayoutHints(kLHintsCenterX ,padShift));
	m_pEventNumberEntry->Connect("ValueSet(Long_t)", "sdhcal::EventNavigator", m_pEventNavigator, "goToEvent(Long_t)");

	m_pNavigatorFrame->AddFrame(m_pEventNumberFrame);
	pMainFrame->AddFrame(m_pNavigatorFrame);
}

//-------------------------------------------------------------------------------------------

EventNavigatorGUI::~EventNavigatorGUI()
{
	delete m_pNavigatorFrame;
	delete m_pNextAndPreviousButtonsFrame;
	delete m_pButtonsFrame;
	delete m_pPreviousEventButton;
	delete m_pNextEventButton;
	delete m_pLoadFileButton;
	delete m_pEventNumberFrame;
	delete m_pGoToEventLabel;
	delete m_pEventNumberEntry;
}

} 

