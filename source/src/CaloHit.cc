  /// \file CaloHit.cc
/*
 *
 * CaloHit.cc source template automatically generated by a class generator
 * Creation date : lun. avr. 28 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "CaloHit.h"

// streamlog
#include "streamlog/streamlog.h"

namespace sdhcal
{

CaloHit::CaloHit(CartesianVector position, CaloHitCell cell, SemiDigitalThreshold semiDigitalThreshold)
 : TEveBox(),
   m_position(position),
   m_cell(cell),
   m_semiDigitalThreshold(semiDigitalThreshold),
   m_color(kRed),
   m_transparency(0)
{
	float xShift = m_cell.m_cellSize0 / 2.f;
	float yShift = m_cell.m_cellSize1 / 2.f;
	float zShift = m_cell.m_cellThickness / 2.f;

	SetVertex(0, m_position.getX() - xShift, m_position.getY() - yShift, m_position.getZ() - zShift);
	SetVertex(1, m_position.getX() - xShift, m_position.getY() + yShift, m_position.getZ() - zShift);
	SetVertex(2, m_position.getX() + xShift, m_position.getY() + yShift, m_position.getZ() - zShift);
	SetVertex(3, m_position.getX() + xShift, m_position.getY() - yShift, m_position.getZ() - zShift);
	SetVertex(4, m_position.getX() - xShift, m_position.getY() - yShift, m_position.getZ() + zShift);
	SetVertex(5, m_position.getX() - xShift, m_position.getY() + yShift, m_position.getZ() + zShift);
	SetVertex(6, m_position.getX() + xShift, m_position.getY() + yShift, m_position.getZ() + zShift);
	SetVertex(7, m_position.getX() + xShift, m_position.getY() - yShift, m_position.getZ() + zShift);

	std::stringstream caloHitNameStream;
	caloHitNameStream << "CaloHit_" << m_cell.m_iCell << "_" << m_cell.m_jCell << "_" << m_cell.m_layer;
	std::stringstream caloHitTitleStream;

	caloHitTitleStream << "Calo hit : \n"
			                 << "   IJK : "
																				<< m_cell.m_iCell << "  "
																				<< m_cell.m_jCell << "  "
																				<< m_cell.m_layer << "\n"
																				<< "   Threshold " << m_semiDigitalThreshold;

	this->SetName(caloHitNameStream.str().c_str());
	this->SetElementTitle(caloHitTitleStream.str().c_str());
	this->SetPickable(true);
}

CaloHit::CaloHit(CaloHit *pCaloHit)
{
	m_position             = pCaloHit->m_position;
	m_cell                 = pCaloHit->m_cell;
	m_semiDigitalThreshold = pCaloHit->m_semiDigitalThreshold;
}


CaloHit::~CaloHit() 
{

}


void CaloHit::setColor(unsigned int color)
{
	m_color = color;
	this->SetMainColor(color);
}



void CaloHit::setTransparency(unsigned int transparency)
{
	m_transparency = transparency;
	this->SetMainTransparency(transparency);
}



void CaloHit::show()
{
	this->setTransparency(0);
}



void CaloHit::hide()
{
	this->setTransparency(100);
}

} 

