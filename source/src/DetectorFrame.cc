/*
 *
 * DetectorFrame.cc source template automatically generated by a class generator
 * Creation date : sam. mai 3 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "DetectorFrame.h"

#include "SDHCAL.h"
#include "GeometryManager.h"
#include "Gui.h"

#include "TGFrame.h"
#include "TGButtonGroup.h"
#include "TGButton.h"
#include "TGNumberEntry.h"
#include "TGLabel.h"
#include "TEveManager.h"

// streamlog
#include "streamlog/streamlog.h"

extern TEveManager *gEve;

ClassImpQ(sdhcal::DetectorFrame);

namespace sdhcal
{

DetectorFrame::DetectorFrame(TGCompositeFrame *pMainFrame)
{
	m_pSDHCAL = Gui::getInstance()->getGeometryManager()->getSDHCAL();

 m_pDetectorFrame = new TGGroupFrame(pMainFrame, "Detector", kVerticalFrame);
 pMainFrame->AddFrame(m_pDetectorFrame, new TGLayoutHints(kLHintsNormal | kLHintsExpandX, 4));

 m_pShowDetectorButton = new TGCheckButton(m_pDetectorFrame, new TGHotString("Show detector"));
 m_pShowDetectorButton->SetState(kButtonDown, false);
 m_pDetectorFrame->AddFrame(m_pShowDetectorButton, new TGLayoutHints(kLHintsNormal, 0, 0, 2));

 m_pShowPartialButton = new TGCheckButton(m_pDetectorFrame, new TGHotString("Show partially :"));
 m_pDetectorFrame->AddFrame(m_pShowPartialButton);

 m_pShowPartialDetectorFrame = new TGVerticalFrame(m_pDetectorFrame);
 m_pDetectorFrame->AddFrame(m_pShowPartialDetectorFrame);

 m_pShowHideButtonGroup = new TGHButtonGroup(m_pShowPartialDetectorFrame);
 m_pShowButton = new TGRadioButton(m_pShowHideButtonGroup, new TGHotString("Show"), 1);
 m_pHideButton = new TGRadioButton(m_pShowHideButtonGroup, new TGHotString("Hide"), 2);
// m_pShowHideButtonGroup->SetLayoutHints(new TGLayoutHints(kLHintsLeft));
 m_pShowHideButtonGroup->Show();
 m_pShowButton->SetOn();
 m_pShowHideButtonGroup->SetRadioButtonExclusive(true);

 m_pShowPartialDetectorFrame->AddFrame(m_pShowHideButtonGroup);//, new TGLayoutHints(kLHintsCenterX | kLHintsTop));

 m_pFromLayerFrame = new TGHorizontalFrame(m_pShowPartialDetectorFrame);
 m_pShowPartialDetectorFrame->AddFrame(m_pFromLayerFrame, new TGLayoutHints(kLHintsNormal, 0, 0, 0, 4));//, new TGLayoutHints(kLHintsCenterX | kLHintsTop));
 m_pToLayerFrame = new TGHorizontalFrame(m_pShowPartialDetectorFrame);
 m_pShowPartialDetectorFrame->AddFrame(m_pToLayerFrame);//, new TGLayoutHints(kLHintsCenterX | kLHintsTop));

	m_pFromLayerLabel = new TGLabel(m_pFromLayerFrame, "from layer");
	m_pFromLayerEntry = new TGNumberEntry(m_pFromLayerFrame, 0, 5, -1,
			TGNumberFormat::kNESInteger, TGNumberFormat::kNEANonNegative, TGNumberFormat::kNELLimitMax,
			0, m_pSDHCAL->getNumberOfLayers()-1);

 m_pToLayerLabel = new TGLabel(m_pToLayerFrame, "to layer");
	m_pToLayerEntry = new TGNumberEntry(m_pToLayerFrame, m_pSDHCAL->getNumberOfLayers()-1, 5, -1,
			TGNumberFormat::kNESInteger, TGNumberFormat::kNEANonNegative, TGNumberFormat::kNELLimitMax,
			0, m_pSDHCAL->getNumberOfLayers()-1);

	m_pFromLayerFrame->AddFrame(m_pFromLayerLabel, new TGLayoutHints(kLHintsCenterY, 0, 4));
	m_pFromLayerFrame->AddFrame(m_pFromLayerEntry, new TGLayoutHints(kLHintsCenterY, 0, 4));
	m_pToLayerFrame->AddFrame(m_pToLayerLabel, new TGLayoutHints(kLHintsCenterY | kLHintsCenterX, 5, 4));
	m_pToLayerFrame->AddFrame(m_pToLayerEntry, new TGLayoutHints(kLHintsCenterY | kLHintsCenterX, 7, 4));

	m_pDetectorFrame->MapSubwindows();
	m_pDetectorFrame->MapWindow();

	// signal - slot connections
	m_pShowDetectorButton->Connect("Toggled(Bool_t)", "sdhcal::DetectorFrame", this, "showDetector(Bool_t)");

	m_pShowPartialButton->Connect("Toggled(Bool_t)", "sdhcal::DetectorFrame", this, "enableShowPartiallyDetectorFrame(Bool_t)");
 m_pShowPartialButton->Toggled(false);

 m_pShowButton->Connect("Toggled(Bool_t)", "sdhcal::DetectorFrame", this, "updateGeometry()");
 m_pHideButton->Connect("Toggled(Bool_t)", "sdhcal::DetectorFrame", this, "updateGeometry()");
 m_pFromLayerEntry->Connect("ValueSet(Long_t)", "sdhcal::DetectorFrame", this, "updateGeometry()");
 m_pToLayerEntry->Connect("ValueSet(Long_t)", "sdhcal::DetectorFrame", this, "updateGeometry()");
}

DetectorFrame::~DetectorFrame() 
{
	delete m_pDetectorFrame;
}


void DetectorFrame::enableShowPartiallyDetectorFrame(Bool_t on)
{
	m_pFromLayerLabel->Disable(!on);
	m_pFromLayerEntry->SetState(on);
	m_pToLayerLabel->Disable(!on);
	m_pToLayerEntry->SetState(on);
	m_pShowButton->SetEnabled(on);
	m_pHideButton->SetEnabled(on);

	this->showPartiallyDetector(on);
}


void DetectorFrame::showDetector(Bool_t on)
{
	if(on)
	{
		m_pSDHCAL->show();
		streamlog_out(MESSAGE) << "Show detector slot called !" << std::endl;
	}
	else
	{
		m_pSDHCAL->hide();
		streamlog_out(MESSAGE) << "Hide detector slot called !" << std::endl;
	}

	gEve->FullRedraw3D();
}


void DetectorFrame::showPartiallyDetector(Bool_t on)
{
	if(on)
	{
		if(!m_pShowDetectorButton->IsDown())
			return;

		this->updateGeometry();
	}
	else
	{
		this->showDetector(m_pShowDetectorButton->IsDown());
	}
}

void DetectorFrame::updateGeometry()
{
	if(!m_pShowDetectorButton->IsDown())
	{
		m_pSDHCAL->hide();
		gEve->FullRedraw3D();
		return;
	}

	const unsigned int fromLayer = m_pFromLayerEntry->GetNumber();
	const unsigned int toLayer   = m_pToLayerEntry->GetNumber();

	const unsigned int minLayer = m_pFromLayerEntry->GetNumMin();
	const unsigned int maxLayer = m_pToLayerEntry->GetNumMax();

	if(m_pShowButton->IsDown())
	{
		if(fromLayer >= toLayer)
		{
			m_pSDHCAL->hide();
			gEve->FullRedraw3D();
			return;
		}

		if(fromLayer == minLayer && toLayer == maxLayer)
		{
			m_pSDHCAL->show();
			gEve->FullRedraw3D();
			return;
		}

		if(minLayer != fromLayer)
			m_pSDHCAL->hideLayers(minLayer, fromLayer);

		m_pSDHCAL->showLayers(fromLayer, toLayer);

		if(maxLayer != toLayer)
			m_pSDHCAL->hideLayers(toLayer, maxLayer);

		gEve->FullRedraw3D();
		return;
	}
	else if(m_pHideButton->IsDown())
	{
		if(fromLayer >= toLayer)
		{
			m_pSDHCAL->show();
			gEve->FullRedraw3D();
			return;
		}

		if(fromLayer == minLayer && toLayer == maxLayer)
		{
			m_pSDHCAL->hide();
			gEve->FullRedraw3D();
			return;
		}

		if(minLayer != fromLayer)
			m_pSDHCAL->showLayers(minLayer, fromLayer);

		m_pSDHCAL->hideLayers(fromLayer, toLayer);

		if(maxLayer != toLayer)
			m_pSDHCAL->showLayers(toLayer, maxLayer);

		gEve->FullRedraw3D();
		return;
	}

}

} 

