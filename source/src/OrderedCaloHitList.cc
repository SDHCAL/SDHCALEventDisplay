/*
 *
 * OrderedCaloHitList.cc source template automatically generated by a class generator
 * Creation date : sam. mai 3 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "OrderedCaloHitList.h"

#include "CaloHit.h"

#include <algorithm>

namespace sdhcal
{

OrderedCaloHitList::OrderedCaloHitList()
 : std::map<unsigned int, CaloHitList>() 
{

}

OrderedCaloHitList::~OrderedCaloHitList() 
{

}


void OrderedCaloHitList::show()
{
	for(OrderedCaloHitList::iterator layerIter = this->begin() , layerEndIter = this->end() ; layerEndIter != layerIter ; ++layerIter)
	{

		for(CaloHitList::iterator iter = layerIter->second.begin() , endIter = layerIter->second.end() ; endIter != iter ; ++iter)
		{
			CaloHit *pCaloHit = *iter;
			pCaloHit->show();
		}

	}
}



void OrderedCaloHitList::hide()
{
	for(OrderedCaloHitList::iterator layerIter = this->begin() , layerEndIter = this->end() ; layerEndIter != layerIter ; ++layerIter)
	{
		for(CaloHitList::iterator iter = layerIter->second.begin() , endIter = layerIter->second.end() ; endIter != iter ; ++iter)
		{
			CaloHit *pCaloHit = *iter;
			pCaloHit->hide();
		}

	}
}


void OrderedCaloHitList::show(unsigned int fromLayer, unsigned int toLayer)
{

	for(OrderedCaloHitList::iterator layerIter = this->begin() , layerEndIter = this->end() ; layerEndIter != layerIter ; ++layerIter)
	{
		const unsigned int layer = layerIter->first;

		if(layer < fromLayer || layer > toLayer)
			continue;

		for(CaloHitList::iterator iter = layerIter->second.begin() , endIter = layerIter->second.end() ; endIter != iter ; ++iter)
		{
			CaloHit *pCaloHit = *iter;
			pCaloHit->show();
		}

	}

}


void OrderedCaloHitList::hide(unsigned int fromLayer, unsigned int toLayer)
{

	for(OrderedCaloHitList::iterator layerIter = this->begin() , layerEndIter = this->end() ; layerEndIter != layerIter ; ++layerIter)
	{
		const unsigned int layer = layerIter->first;

		if(layer < fromLayer || layer > toLayer)
			continue;

		for(CaloHitList::iterator iter = layerIter->second.begin() , endIter = layerIter->second.end() ; endIter != iter ; ++iter)
		{
			CaloHit *pCaloHit = *iter;
			pCaloHit->hide();
		}

	}

}



void OrderedCaloHitList::show(unsigned int layer)
{
	OrderedCaloHitList::iterator findIter = this->find(layer);

	if(this->end() == findIter)
		return;

	for(CaloHitList::iterator iter = findIter->second.begin() , endIter = findIter->second.end() ; endIter != iter ; ++iter)
	{
		CaloHit *pCaloHit = *iter;
		pCaloHit->show();
	}

}

void OrderedCaloHitList::hide(unsigned int layer)
{
	OrderedCaloHitList::iterator findIter = this->find(layer);

	if(this->end() == findIter)
		return;

	for(CaloHitList::iterator iter = findIter->second.begin() , endIter = findIter->second.end() ; endIter != iter ; ++iter)
	{
		CaloHit *pCaloHit = *iter;
		pCaloHit->hide();
	}
}


} 

