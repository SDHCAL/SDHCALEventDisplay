/*
 *
 * GeometryManager.cc source template automatically generated by a class generator
 * Creation date : sam. mai 3 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "GeometryManager.h"

#include <stddef.h>

#include "TGeoManager.h"

#include "SDHCAL.h"

namespace sdhcal
{

GeometryManager::GeometryManager()
 : m_alreadyBuilt(false),
   m_pTopMaterial(NULL),
   m_pTopMedium(NULL),
   m_pTopVolume(NULL)
{
	m_pGeoManager = new TGeoManager("Geometry Manager", "SDHCAL Event Display");
}

GeometryManager::~GeometryManager() 
{
	delete m_pGeoManager;
	delete m_pSDHCAL;
}


void GeometryManager::buildGeometry()
{
	if(m_alreadyBuilt)
		return;

 m_pTopMaterial = new TGeoMaterial("Vacuum", 0, 0, 0); // dummy material
 m_pTopMedium = new TGeoMedium("Vacuum", 1, m_pTopMaterial);
 m_pTopVolume = m_pGeoManager->MakeBox("WorldVolume", m_pTopMedium, 100000.0, 100000.0, 100000.0);
	m_pGeoManager->SetTopVolume(m_pTopVolume);
	m_pTopVolume->SetVisibility(false);

	m_pSDHCAL = new SDHCAL(m_pGeoManager);
	m_pSDHCAL->build();

//	TGeoVolume *pFakeVolume = m_pGeoManager->MakeBox("FakeVolume", m_pTopMedium, 1000.0, 1000.0, 1.0);
//	m_pTopVolume->AddNodeOverlap(pFakeVolume, 0);

//	TGeoVolume *pBottomBorder = m_pGeoManager->MakeBox("BottomBorder", m_pTopMedium, 2, 500, 2);
//	TGeoVolume *pTopBorder    = m_pGeoManager->MakeBox("TopBorder",    m_pTopMedium, 2, 500, 2);
//	TGeoVolume *pRightBorder  = m_pGeoManager->MakeBox("RightBorder",  m_pTopMedium, 500, 2, 2);
//	TGeoVolume *pLeftBorder   = m_pGeoManager->MakeBox("LeftBorder",   m_pTopMedium, 500, 2, 2);
//
// m_pTopVolume->AddNodeOverlap(pBottomBorder, 0, new TGeoTranslation(-500.0, 0, 0));
// m_pTopVolume->AddNodeOverlap(pTopBorder,    0, new TGeoTranslation(500.0, 0, 0));
// m_pTopVolume->AddNodeOverlap(pRightBorder,  0, new TGeoTranslation(0, 500.0, 0));
// m_pTopVolume->AddNodeOverlap(pLeftBorder,   0, new TGeoTranslation(0, -500.0, 0));

	m_pGeoManager->CloseGeometry();
	m_pGeoManager->SetVerboseLevel(0);

	m_alreadyBuilt = true;
}

} 

