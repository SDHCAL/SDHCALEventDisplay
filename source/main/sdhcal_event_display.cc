/*
 *
 * sdhcal_event_display.cc main file template automatically generated by a class generator
 * Creation date : sam. avr. 26 2014
 *
 * This file is part of SDHCALEventDisplay libraries.
 * 
 * SDHCALEventDisplay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCALEventDisplay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCALEventDisplay.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// root
#include "TEveManager.h"
#include "TRint.h"
#include "TSystem.h"
#include "TGLViewer.h"
#include "TGeoManager.h"

// sdhcal
#include "Gui.h"
#include "SDHCALEventDisplayVersion.h"
#include "Config.h"
#include "EventNavigator.h"

// streamlog
#include "streamlog/streamlog.h"

// tclap
#include "tclap/CmdLine.h"
#include "tclap/Arg.h"

// std
#include <string>
#include <ctime>

extern TGeoManager *gGeoManager;

using namespace streamlog;
using namespace sdhcal;

int main(int argc, char **argv)
{

	time_t now = time(0);
	unsigned int welcomeSize = 43;
	std::string spacer("  ");

	std::string starBanner;
	starBanner.append(welcomeSize, '*');

	std::string emptyLine;
	emptyLine.push_back('*');
	emptyLine.append(welcomeSize-2, ' ');
	emptyLine.push_back('*');

	std::string versionStr;
	std::stringstream versionStrStream;
	versionStrStream << "Version " << SDHCALEventDisplay_VERSION;
	std::string dateStr;
	std::stringstream dateStrStream;
	dateStrStream << "Started at " << ctime( & now );

	std::string temp = dateStrStream.str().erase(dateStrStream.str().size() - 1);
	dateStrStream.str("");
	dateStrStream << temp;

	int missingCharacters = welcomeSize - 2 - versionStrStream.str().size();

	if(missingCharacters % 2 != 0)
	{
		versionStr = std::string("*")
		           + std::string(missingCharacters/2, ' ')
		           + versionStrStream.str()
		           + std::string(missingCharacters/2 + 1, ' ')
		           + "*";
	}
	else
	{
		versionStr = std::string("*")
		           + std::string(missingCharacters/2, ' ')
		           + versionStrStream.str()
		           + std::string(missingCharacters/2, ' ')
		           + "*";
	}

	missingCharacters = welcomeSize - 2 - dateStrStream.str().size();

	if(missingCharacters % 2 != 0)
	{
		dateStr = std::string("*")
		           + std::string(missingCharacters/2, ' ')
		           + dateStrStream.str()
		           + std::string(missingCharacters/2 + 1, ' ')
		           + "*";
	}
	else
	{
		dateStr = std::string("*")
		           + std::string(missingCharacters/2, ' ')
		           + dateStrStream.str()
		           + std::string(missingCharacters/2, ' ')
		           + "*";
	}

	std::cout << spacer << starBanner << std::endl;
	std::cout << spacer << emptyLine << std::endl;
	std::cout << spacer << "*     WELCOME to SDHCAL Event Display     *" << std::endl;
	std::cout << spacer << "*              Copyright 2014             *" << std::endl;
	std::cout << spacer << versionStr << std::endl;
	std::cout << spacer << dateStr << std::endl;
	std::cout << spacer << emptyLine << std::endl;
	std::cout << spacer << "*       sdhcal_event_display binary       *" << std::endl;
	std::cout << spacer << "*             Author : R. Ete             *" << std::endl;
	std::cout << spacer << emptyLine << std::endl;
	std::cout << spacer << starBanner << std::endl;

	std::string cmdLineFooter = "Please report bug to <rete@ipnl.in2p3.fr>";
	TCLAP::CmdLine *pCommandLine = new TCLAP::CmdLine(cmdLineFooter, ' ', SDHCALEventDisplay_VERSION);

	const std::string defaultGearFile = std::string(SDHCALEventDisplay_PATH) + "/config/SDHCALGearFile.xml";
	// gear file
	TCLAP::ValueArg<std::string> gearFileNameArg(
					"g"
			, "gear-file"
			, "The gear file name for geometry"
			, false
			, defaultGearFile
			, "string");
	pCommandLine->add(gearFileNameArg);

	// lcio file name (optional)
	TCLAP::ValueArg<std::string> lcioFileNameArg(
					"f"
			, "lcio-file"
			, "The lcio file name for data"
			, false
			, ""
			, "string");
	pCommandLine->add(lcioFileNameArg);

	// verbose level (optional)
	std::vector<std::string> verboseAllowedValues;
	verboseAllowedValues.push_back("DEBUG");
	verboseAllowedValues.push_back("MESSAGE");
	verboseAllowedValues.push_back("WARNING");
	verboseAllowedValues.push_back("ERROR");
	TCLAP::ValuesConstraint<std::string> verboseConstraint(verboseAllowedValues);
	TCLAP::ValueArg<std::string> verboseLevelArg(
					"v"
			, "verbose"
			, "The verbose level in terminal"
			, false
			, "MESSAGE"
			, &verboseConstraint);
	pCommandLine->add(verboseLevelArg);

	pCommandLine->parse(argc, argv);

	// logstream settings
	streamlog::out.init(std::cout, "SDHCALEventDisplay");

 streamlog::out.addLevelName<streamlog::DEBUG>();
 streamlog::out.addLevelName<streamlog::MESSAGE>();
 streamlog::out.addLevelName<streamlog::WARNING>();
 streamlog::out.addLevelName<streamlog::ERROR>();

 streamlog::logscope scope(streamlog::out);

 scope.setLevel(verboseLevelArg.getValue());

 Config *pConfig = Config::getInstance();
 pConfig->parseGearFile(gearFileNameArg.getValue());

	// application main thread
	TRint *pApplication = new TRint("SDHCAL Event display application", 0, 0);

	// Graphical User Interface
	// Contains TEveManager::Create() and additional gui implementation
	Gui *pGui = Gui::getInstance();
	pGui->build();

	if(lcioFileNameArg.isSet())
	{
		pGui->getEventNavigator()->loadLCIOFile(lcioFileNameArg.getValue());
	}

	pApplication->Run();

	delete pApplication;

	return 0;
}


